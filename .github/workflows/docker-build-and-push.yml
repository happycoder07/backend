name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist
            ecosystem.config.js
            package.json

      - name: Archive Dockerfile
        uses: actions/upload-artifact@v3
        with:
          name: dockerfile
          path: Dockerfile

  docker-build:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Download Dockerfile
        uses: actions/download-artifact@v3
        with:
          name: dockerfile

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}


      - name: Debug secrets
        run: |
            echo "MONGO_URI=${{ secrets.MONGO_URI }}"
            echo "EXPRESS_PORT=${{ secrets.EXPRESS_PORT }}"

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: happycoder07/backend:latest
          build-args: |
            MONGO_URI=${{ secrets.MONGO_URI }}
            EXPRESS_PORT=${{ secrets.EXPRESS_PORT }}
          push: true  # Build the image but do not push yet

      
      - name: Logout from Docker Hub
        run: docker logout

  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    
    - name: Install kubectl
      run: |
        sudo apt install basez
        curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.30.2/2024-07-12/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin
        kubectl version --client

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Generate kubeconfig
      run: |
        {
            echo 'EKS_CREDS<<EOF'
            aws eks update-kubeconfig --region ap-south-1 --name kube8cluster --dry-run | base64
            echo EOF
        } >> $GITHUB_ENV
    - uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ env.EKS_CREDS }}
    - run: kubectl get pods



    # - name: Decode and set up kubeconfig
    #   run: |
    #     echo ${{ secrets.KUBE_CONFIG_DATA }} | base64 --decode > $HOME/.kube/config

    - name: Create Kubernetes secret for Docker Hub
      run: |
        kubectl create secret docker-registry regcred \
          --docker-username=${{ secrets.DOCKER_HUB_USERNAME }} \
          --docker-password=${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} \
          --docker-email=${{ secrets.DOCKER_HUB_EMAIL }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Apply Kubernetes manifests
      run: |
        kubectl apply -f ./k8s/deployment.yaml
        kubectl apply -f ./k8s/service.yaml
        kubectl apply -f ./k8s/ingress.yaml

    - name: Verify deployment
      run: |
        kubectl get pods
        kubectl get services
        kubectl get ingress
